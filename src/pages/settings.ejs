<html lang="en">
  <%- include('./partials/head',{title: `${request.body.serverHost} - Settings`}); %>
  <link rel="stylesheet" href="/static/css/form.css">
  <link rel="stylesheet" href="/static/css/coloris.min.css">
  <link rel="stylesheet" href="/static/css/theme.css">
  <body class="d-flex flex-column h-100">
    <%- include('./partials/navbar', {active:'settings'}); %>
    <main class="pb-1">
      <div class="container">
        <h1 class="text-center">Server settings</h1>
        <form class="form settings-form">
          <div id ="settingsPersonalization">
            <h3>Personalization</h3>
            <p> In this section, you can personalize the server color scheme and logo according to your specific requirements. 
            </p>
            <label for="lookandfeel.server.logo" class="mt-2 mb-1 fw-bold disabled">Logo</label>
            <p>Upload a new logo for your server. For better results, use an image with transparent background. </p>
            <div class="row mx-auto mb-1">
              <div class="col-12 col-md-8">
                  <input type="file" id="lookandfeel.server.logo" name="lookandfeel.server.logo" class="form-control" accept="image/*">
              </div>
              <div class="col-4 col-md-3 mt-2 mt-md-0">
                <input type='text' class="d-none" id='lookandfeel.server.logo.default' name='lookandfeel.server.logo.default' value='false'>
                <button class="form-control btn btn-md btn-primary" type="button" onclick="updateLogo(true)">Restore</button>            
            </div>
            </div>
            <label for="lookandfeel.server.frontendBackground" class="mt-2 mb-1 fw-bold">Frontend background</label>
            <p>Choose the colors for the frontend background.</p>
            <div class="row mx-auto mb-1">
              <div class="col-12 col-md-4  mb-2">
                <input id="lookandfeel.server.colors.primaryColor" type="text" data-coloris class="form-control position-static"><span class="ms-2">Primary</span>
              </div>
              <div class="col-12 col-md-4  mb-2">
               <input id= "lookandfeel.server.colors.secondaryColor" type="text" data-coloris class="form-control position-static "><span class="ms-2">Secondary</span>
              </div>
              <div class="col-12 col-md-4 mb-2">
                <input id="lookandfeel.server.colors.tertiaryColor" type="text" data-coloris class="form-control position-static "><span class="ms-2">Tertiary</span>
              </div>
            </div>
            <div>
              <div class="col-12 col-md-4 mb-2">
                <label for="lookandfeel.server.colors.orientation" class="mb-2 fw-bold">Orientation</label>
                <select id="lookandfeel.server.colors.orientation" name="lookandfeel.server.color.orientation" class="form-select">
                  <option value="to top">To Top</option>
                  <option value="to right">To Right</option>
                  <option value="to bottom">To Bottom</option>
                  <option value="to left">To Left</option>
                  <option value="to top left">To Top Left</option>
                  <option value="to top right">To Top Right</option>
                  <option value="to bottom left">To Bottom Left</option>
                  <option value="to bottom right">To Bottom Right</option>
                </select>
              </div>
                <div class="col-12">
                    <div id="lookandfeel.server.colors.gradientbar" class="gradient-bar"></div>
                </div>
            </div>
            <div class="row mx-auto mb-1">
              <label for="lookandfeel.server.colors.theme" class="mt-2 mb-1 fw-bold">Frontend predefined themes</label>
              <div class="col-12 col-md-8">
                <select id="lookandfeel.server.colors.theme" name="lookandfeel.server.colors.theme" class="form-select mt-2" onchange="handleThemeChange(this,'<%= JSON.stringify(request.body.settingsLookAndFeelThemes) %>')">
                  <option value=""></option>
                  <% for(const key in request.body.settingsLookAndFeelThemes) { %>
                    <option value="<%= key %>"><%= key %></option>
                  <% } %>
                </select>
              </div>
              <div class="col-4 col-md-3 mt-2 mt-md-0">
                <input type='text' class="d-none" id='lookandfeel.server.colors.default' name='server.colors.default' value='false'>
                <button class="form-control btn btn-md btn-primary" type="button" onclick="updateTheme('','','','','','','',true)">Restore</button>            
              </div>
            </div>  
            <div class="d-flex justify-content-md-start justify-content-center">
              <button class="btn btn-lg btn-primary mt-4 col-3 col-md-2" name="Submit" type="button" onclick="saveLookAndFeel()">Save</button>
            </div>
          </div>
          <div id ="settingsServer">
            <h3 class="mt-5">Server</h3>
            <p>
                You can configure the server related settings in this section. 
              Server is identified using this public/private keypair, it will use the following credentials to interact with nostr. The public key will be used in NIP96 and NIP05. The private key will be used to send DM's and sign notes.
            </p>
            <label for="server.name" class="mt-2 mb-1 fw-bold">Hostname</label>
            <p> 
              Server hostname is used to identify the server, this will be displayed on home page, page title, etc.
            </p>
            <input  type="text" 
                    id="server.host"  
                    name="server.host" 
                    class="form-control" 
                    value="<%= request.body.settingsServerHost %>" 
                    placeholder="Server host" 
                    required
                    >

            <label for="environment" class="mt-2 mb-1 fw-bold">Environment</label>
            <p>Configure the server's environment. For security reasons, a server exposed to the internet should be set to "production" mode, it enables certain security features that are not necessary in a development environment.</p>
            <div class="col-12 col-md-4 col-lg-5">
              <select id="environment" name="environment" class="form-select">
                <option value="development" <% if (request.body.settingsEnvironment === 'development') { %>selected<% } %>>development</option>
                <option value="production" <% if (request.body.settingsEnvironment === 'production') { %>selected<% } %>>production</option>
              </select>
            </div>
            <div class="alert alert-warning mt-3" role="alert">
              <i class="fa-solid fa-triangle-exclamation"></i> If you specify "production" mode, <b>the server must be configured under HTTPS.</b> Otherwise, users will not be able to log in because the server will not be able to set the cookies under insecure connections.
          </div>

            <label for="server.pubkey" class="mt-3 mb-1 fw-bold">Server pubkey</label>
            <p>This is the public key of the server. It's used to return the server's pubkey to the "_" NIP05 requests.</p>
            <input  type="text" 
                    id="server.pubkey"  
                    name="server.pubkey" 
                    class="form-control" 
                    value="<%= request.body.settingServerPubkey %>" 
                    placeholder="Server pubkey (HEX format)" 
                    required
                    >
            <label for="server.secretKey" class="mt-2 mb-1 fw-bold">Server secret key</label>
            <p>Used to sign and decrypt the server DM's and notes.</p>
            <div class="input-group">
                <input  type="password" 
                id="server.secretKey" 
                name="server.secretKey" 
                class="form-control mb-2" 
                defaultValue="<%= request.body.settingServerSecretkey %>" 
                value="<%= request.body.settingServerSecretkey %>" 
                placeholder="Server secret key (HEX format)" 
                required 
                >
                <button id="toggle-password" type="button" class="d-none"
                  aria-label="Show secret key as plain text. Warning: this will display your password on the screen.">
                </button>
            </div>
            <div class="alert alert-warning mt-3" role="alert">
              <i class="fa-solid fa-triangle-exclamation"></i> Be careful, <b>both keys must be modified simultaneously, and be valid with each other.
              </b> otherwise the server won't function properly.
            </div>
            <label for="redis.expireTime" class="mt-3 mb-1 fw-bold">Cache expiration</label>
            <p>Specify the cache expiration time in seconds. This will be used to cache the server's data. Is recommended to set this value to 300 or higher to increase the server's performance.</p>
            <div class="col-12 col-sm-5 col-md-4">
                      <input  type="text" 
                      id="redis.expireTime"  
                      name="redis.expireTime" 
                      class="form-control" 
                      value="<%= request.body.settingsRedisExpireTime %>" 
                      placeholder="Expiration time (seconds)" 
                      required
                      >
            </div>  
          </div>
          <div>
            <h3 class="mt-5">Modules</h3>
            <p>
                In this section, you can enable or disable server modules as needed. 
                It provides you with the flexibility to customize the functionality of your server according to your specific requirements. 
            </p>
            <div class="row mx-auto ">
            <% let counter = 0; %>
            <% for(const key in request.body.availableModules) { %>
                <% if (counter % 6 === 0 && counter !== 0) { %>
                    </div><div class="row mx-auto ">
                <% } %>
                <div class="col-6">
                    <label for="<%= key %>" class="mt-3 mb-1 fw-bold"><%= key %></label>
                    <div class="form-check form-switch">
                      <input 
                        class="form-check-input" 
                        type="checkbox" 
                        value="<%= request.body.availableModules[key]['enabled'] ? true : false %>" 
                        <%= request.body.availableModules[key]['enabled'] ? 'checked' : '' %> 
                        name="server.availableModules.<%= key %>.enabled" 
                        id="server.availableModules.<%= key %>.enabled" 
                        onclick="handleCheckboxClick('<%= key %>',this.checked)">
                    </div>
                    <p class="form-check-label mt-4"><%= request.body.availableModules[key]['description'] %></p>

                </div>
                <% counter++; %>
            <% } %>
            </div>
          </div>
          <div id ="settingsStorage">
            <h3 class="mt-5">Storage</h3>
            <p> In this section, you can customize and manage how your files are stored. 
                Adjust the parameters according to your needs to optimize performance and organization of the server files.
            </p>
            <label for="storage.type" class="mt-2 mb-1 fw-bold">Storage type</label>
            <p>Local storage is used to store files on the server's disk. Remote storage (S3) is used to store files on an remote S3 bucket.</p>
            <div class="col-12 col-md-4">
              <select id="storage.type" name="storage.type" class="form-select">
                <option value="local" <% if (request.body.settingsStorage['type'] === 'local') { %>selected<% } %>>local</option>
                <option value="remote" <% if (request.body.settingsStorage['type'] === 'remote') { %>selected<% } %>>remote</option>
              </select>
            </div>
            <div class="alert alert-danger mt-3" role="alert">
              <i class="fa-solid fa-triangle-exclamation"></i> 
              <b> Change this only if you know what you are doing.</b> After changing the storage type, 
                  you need to migrate the files to the new storage type <b>manually.</b>
            </div>  
            <label for="storage.local.tempPath" class="mt-2 mb-1 fw-bold">Temp path</label>
            <p>Path to store the files before they are processed and moved to the final storage location.
                The path must finish with a slash. <b>(e.g. tmp/)</b>
            </p>
            <div class="col-12 col-sm-5 col-md-4">
              <input  type="text" 
              id="storage.local.tempPath" 
              name="storage.local.tempPath" 
              class="form-control" 
              value="<%= request.body.settingsStorage['local']['tempPath'] %>" 
              placeholder="Local storage temp path" 
              required
              >
            </div>
            <h5 class="mt-3">Local storage</h5>
            <p> In this section, you can configure the local storage settings of your server. 
                It provides you with the flexibility to customize the local storage settings according to your specific requirements.
            </p>
            <label for="storage.local.mediaPath" class="mt-2 mb-1 fw-bold">Media path</label>
            <p>Path to store the media files on the server's local disk (when the storage type is set to "local"). 
                The path must finish with a slash. <b>(e.g. media/)</b>
            </p>
            <div class="col-12 col-sm-5 col-md-4">
              <input  type="text" 
              id="storage.local.mediaPath" 
              name="storage.local.mediaPath" 
              class="form-control" 
              value="<%= request.body.settingsStorage['local']['mediaPath'] %>" 
              placeholder="Local storage media path" 
              required
              >
            </div>
            <h5 class="mt-3">S3 storage</h5>
            <p> In this section, you can configure the remote (S3) storage settings of your server. 
                It provides you with the flexibility to customize the S3 storage settings according to your specific requirements.
            </p>
            <label for="storage.remote.bucketName" class="mt-2 mb-1 fw-bold">Bucket name</label>
            <p>Specify the bucket name for remote (S3) storage.</p>
              <input  type="text" 
              id="storage.remote.bucketName" 
              name="storage.remote.bucketName" 
              class="form-control" 
              value="<%= request.body.settingsStorage['remote']['bucketName'] %>" 
              placeholder="S3 storage bucket name" 
              required
              >
            <label for="storage.remote.endpoint" class="mt-2 mb-1 fw-bold">Endpoint</label>
            <p>Specify the endpoint for remote (S3) storage.</p>
              <input  type="text" 
              id="storage.remote.endpoint" 
              name="storage.remote.endpoint" 
              class="form-control" 
              value="<%= request.body.settingsStorage['remote']['endpoint'] %>" 
              placeholder="S3 storage endpoint" 
              required
              >
            <label for="storage.remote.accessKeyId" class="mt-2 mb-1 fw-bold">Access key ID</label>
            <p>Specify the access key ID for remote (S3) storage.</p>
              <input  type="text" 
              id="storage.remote.accessKeyId" 
              name="storage.remote.accessKeyId" 
              class="form-control" 
              value="<%= request.body.settingsStorage['remote']['accessKeyId'] %>" 
              placeholder="S3 storage access key ID" 
              required
              >
            <label for="storage.remote.secretAccessKey" class="mt-2 mb-1 fw-bold">Secret access key</label>
            <p>Specify the secret access key for remote (S3) storage. </p>
              <input  type="text" 
              id="storage.remote.secretAccessKey" 
              name="storage.remote.secretAccessKey" 
              class="form-control" 
              value="<%= request.body.settingsStorage['remote']['secretAccessKey'] %>" 
              placeholder="S3 storage secret access key" 
              required
              >
            <label for="storage.remote.region" class="mt-2 mb-1 fw-bold">Region</label>
            <p>Specify the region for remote (S3) storage. For Cloudflare storage always use "auto".</p>
              <input  type="text" 
              id="storage.remote.region" 
              name="storage.remote.region" 
              class="form-control" 
              value="<%= request.body.settingsStorage['remote']['region'] %>" 
              placeholder="S3 storage region" 
              required
              >
          </div>
          <div id ="settingsMedia">
            <h3 class="mt-5">Media</h3>
            <p> In this section, you can configure the media settings of your server. 
                It provides you with the flexibility to customize the media settings according to your specific requirements. 
            </p>
            <label for="media.returnURL" class="mt-2 mb-1 fw-bold">Return URL</label>
            <p>Specify the return URL for the media uploads. This URL will be used to return the uploaded media to the client.</p>
            <input  type="text" 
                    id="media.returnURL" 
                    name="media.returnURL" 
                    class="form-control" 
                    value="<%= request.body.settingsMedia['returnURL'] %>" 
                    placeholder="default: https://servername/media"
                    required
                    >
            <label for="media.allowPublicUploads" class="mt-4 mb-1 fw-bold">Allow public uploads</label>
            <p>If disabled, only registered pubkeys can upload files.</p>
            <div class="form-check form-switch">
              <input  class="form-check-input" 
                      type="checkbox" 
                      value="<%= request.body.settingsMedia['allowPublicUploads'] ? true : false %>" 
                      <%= request.body.settingsMedia['allowPublicUploads'] ? 'checked' : '' %> 
                      name="media.allowPublicUploads" 
                      id="media.allowPublicUploads"
                      >
            </div>
            <label for="media.transform.enabled" class="mt-4 mb-1 fw-bold">Enable image and video resizing</label>
            <p>Enable or disable the image and video resizing functionality of the server. 
              If enabled, the server will resize the images and videos to the specified target size.</p>
            <div class="form-check form-switch">
              <input  class="form-check-input" 
                      type="checkbox" 
                      value="<%= request.body.settingsMedia['transform']['enabled'] ? true : false %>" 
                      <%= request.body.settingsMedia['transform']['enabled'] ? 'checked' : '' %> 
                      name="media.transform.enabled" 
                      id="media.transform.enabled"
                      >
            </div>
            <label for="media.maxMBfilesize" class="mt-4 mb-1 mt-3 fw-bold">Max file size (MB)</label>
            <p>Specify the maximum file size allowed for uploads in megabytes.</p>
              <div class="col-12">
                <input  type="text" 
                        id="media.maxMBfilesize" 
                        name="media.maxMBfilesize" 
                        class="form-control" 
                        value="<%= request.body.settingsMedia['maxMBfilesize'] %>" 
                        placeholder="Max file size (in MB)" 
                        required 
                        
                        >
             </div>
            <label class="mt-2 mb-1 fw-bold">Image and video resizing</label>
            <p>In this section, you can specify the default target size for image and video uploads in pixels. 
              By setting the target size, you can optimize the filesize and disk space of your server.</p>
            <div class="row">
              <label class="mb-1 mt-1">Images</label>
                <div class="col-4 col-md-3">
                    <input  type="number" 
                            id="media.transform.media.image.width" 
                            name="media.transform.media.image.width" 
                            class="form-control" 
                            placeholder="Width" 
                            value="<%= request.body.settingsMedia['transform']['media']['image']['width'] %>" 
                            >
                </div>
                <div class="col-4 col-md-3">
                  <input  type="number" 
                          id="media.transform.media.image.height" 
                          name="media.transform.media.image.height" 
                          class="form-control" 
                          placeholder="Width" 
                          value="<%= request.body.settingsMedia['transform']['media']['image']['height'] %>" 
                          >
              </div>
            </div>
            <div class="row">
              <label class="mt-3 mb-1">Videos</label>
              <div class="col-4 col-md-3">
                    <input  type="number" 
                            id="media.transform.media.video.width" 
                            name="media.transform.media.video.width" 
                            class="form-control" 
                            placeholder="Width" 
                            value="<%= request.body.settingsMedia['transform']['media']['video']['width'] %>" 
                            >
                </div>
                <div class="col-4 col-md-3">
                  <input  type="number" 
                          id="media.transform.media.video.height" 
                          name="media.transform.media.video.height" 
                          class="form-control" 
                          placeholder="Width" 
                          value="<%= request.body.settingsMedia['transform']['media']['video']['height'] %>" 
                          >
              </div>
            </div>
          </div>
          <div id="settingsPayments">
            <h3 class="mt-5">Payments</h3>
            <p> In this section, you can configure the LN payment provider of your server. Currently only GetAlby is supported. 
            </p>
            <label for="payments.enabled" class="mt-2 mb-1 fw-bold">Enable payments</label>
            <p>Enable or disable the payment functionality of the server.if payments are enabled all file uploads will be paid with sats. 
              The amount will be calculated based on the max allowed file size the "maxSatoshi" value.</p>
            <div class="form-check form-switch">
              <input  class="form-check-input" 
                      type="checkbox" 
                      value="<%= request.body.settingsPayments['enabled'] ? true : false %>" 
                      <%= request.body.settingsPayments['enabled'] ? 'checked' : '' %> 
                      name="payments.enabled" 
                      id="payments.enabled"
                      >
            </div>
            <label for="payments.provider" class="mt-4 mb-1 fw-bold">Payment provider</label>
            <p>Choose the payment provider for your server. Currently only <a href="https://getalby.com/">getalby.com</a> is supported.
            </p>
            <div class="col-12 col-md-4">
              <select id="payments.paymentProvider" name="payments.paymentProvider" class="form-select">
                <option value="getalby" <% if (request.body.settingsPayments['paymentProvider'] === 'getalby') { %>selected<% } %>>Getalby</option>
              </select>
            </div>
            <label for="payments.maxSatoshi" class="mt-4 mb-1 fw-bold">Max Satoshi</label>
            <p>Specify the maximum amount of sats that can be paid for the biggest accepted file size or the shortest register username. 
              If the request exced the limit, it uses this maxium limit for calculation. It's always at least 1 sat per request.
            </p>
            <div class="row">
              <div class="col-12 col-md-4">
                <label for="payments.satoshi.mediaMaxSatoshi" class="mt-2 mb-1 fw-bold">Media uploads</label>
                <input  type="text" 
                        id="payments.satoshi.mediaMaxSatoshi" 
                        name="payments.satoshi.mediaMaxSatoshi" 
                        class="form-control" 
                        value="<%= request.body.settingsPayments['satoshi']['mediaMaxSatoshi'] %>" 
                        placeholder="ex. 1000" 
                        required
                        > 
              </div>
              <div class="col-12 col-md-4">
                <label for="payments.satoshi.registerMaxSatoshi" class="mt-2 mb-1 fw-bold">Register form</label>
                <input  type="text" 
                        id="payments.satoshi.registerMaxSatoshi"
                        name="payments.satoshi.registerMaxSatoshi"
                        class="form-control" 
                        value="<%= request.body.settingsPayments['satoshi']['registerMaxSatoshi'] %>" 
                        placeholder="ex. 1000" 
                        required
                        > 
              </div>
            </div>
            <label for="payments.getalby.authToken" class="mt-4 mb-1 fw-bold">GetAlby authToken</label>
            <p>Specify the authToken for GetAlby payment provider.</p>
              <input  type="text" 
                      id="payments.getalby.authToken" 
                      name="payments.getalby.authToken" 
                      class="form-control" 
                      value="<%= request.body.settingsPayments['getalby']['authToken'] %>" 
                      placeholder="GetAlby authToken" 
                      required
                      >

          </div>
          <div id="settingsLogger">
            <h3 class="mt-5">Logging</h3>
            <p> In this section, you can configure the log settings of your server. The log level determines the verbosity of the logs:
                debug (2), info (3), warn (4), error (5)
            </p>
            <label for="logger.level" class="mt-2 mb-1 fw-bold">Log level</label>
            <div class="col-3 col-md-2">
              <select id="logger.minLevel" 
              name="logger.minLevel" 
              class="form-select">
                <option value="1" <%= request.body.settingsLogger['minLevel'] == 1 ? 'selected' : '' %>>1</option>
                <option value="2" <%= request.body.settingsLogger['minLevel'] == 2 ? 'selected' : '' %>>2</option>
                <option value="3" <%= request.body.settingsLogger['minLevel'] == 3 ? 'selected' : '' %>>3</option>
                <option value="4" <%= request.body.settingsLogger['minLevel'] == 4 ? 'selected' : '' %>>4</option>
                <option value="5" <%= request.body.settingsLogger['minLevel'] == 5 ? 'selected' : '' %>>5</option>
              </select>
            </div>
            <div class="alert alert-warning mt-3" role="alert">
              <i class="fa-solid fa-triangle-exclamation"></i> <b>Change this only if you know what you are doing.</b> After changing the log level, you need to <b>restart the server</b> to apply the changes.
            </div>
          </div>
          <div>
            <label for="log" class="mt-2 mb-1 fw-bold">Log history</label>
            <p> Only the last 1000 records with severity greater than 4 (warning) will be displayed here. 
                If you need to see more details, you can check the server's generated log files.
            </p>
            <textarea class="form-control" id="log" name="log" rows="10" disabled></textarea>
              <div class="d-flex justify-content-md-start justify-content-center">
                <button class="btn btn-lg btn-primary mt-4 col-3 col-md-2" name="Submit" type="button" onclick="saveSettings()">Save</button>
              </div>
        </form>
      </div>
    </main>
    <%- include('./partials/footer'); %>
    <%- include('./components/alert-modal', {"objectId":"settings"}); %>

<script src="/static/js/form.js"></script>
<script src="/static/js/settings.js"></script>
<script src="/static/js/coloris.min.js"></script>
<script src="/static/js/semaphore.js"></script>

<script>
  storeAuthkey("<%= request.session.authkey %>")
  let logHistory = "<%= request.body.logHistory %>"
  window.logData = <%- JSON.stringify(request.body.logHistory || []) %>;
</script>
</body>
<style>
.gradient-bar {
    position: relative;
    height: 200px; 
    width: 100%; 
    cursor: pointer;
    border-radius: 5px; 
    margin-top: 10px;
}

.gradient-bar .handle {
    position: absolute;
    bottom: 0;
    width: 7px;
    height: 20%;
    background: #fff;
    cursor: ew-resize;
    border-radius: 3px;
}

</style>
</html>