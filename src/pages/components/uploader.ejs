<link href="https://cdn.jsdelivr.net/npm/bootstrap-table@1.22.6/dist/bootstrap-table.min.css" rel="stylesheet">
<link rel="stylesheet" href="/static/css/table.css">
<link rel="stylesheet" href="/static/css/form.css">
<div class="col-12 text-center mx-auto z-1">
    <div id="drop-zone" class="card text-center p-5 default-bg m-2 lead" role="button"><span>Drag and drop files here or click to browse</span></div>
    <input type="file" id="file-input" class="d-none" multiple>
    <table 
        id="file-table" 
        data-toggle="table" 
        class="table d-none">
        <thead>
            <tr>
                <th data-field="id" class="d-none">ID</th>
                <th data-field="fileName" data-formatter="fileNameFormatter">File Name</th>
                <th data-field="fileType" class="d-none">File Type</th>
                <th data-field="transform" data-formatter="transformFormatter">Resize</th>
                <th data-field="fileSize">File Size</th>
                <th data-field="invoice" data-formatter="invoiceFormatter">Invoice</th>
                <th data-field="satoshi" data-formatter="satoshiFormatter" class="text-end">Satoshi</th>
                <th data-field="macaroon" class="d-none">Macaroon</th>
                <th data-field="isPaid" class="d-none">isPaid</th>
                <th data-field="action" data-formatter="actionFormatter" class="text-end">Action</th>
                <th data-field="accepted" class="d-none">Accepted</th>

            </tr>
        </thead>
        <tbody id="file-table-body"></tbody>
    </table>
    <div id="account-message" class="d-none">
        <p class="text-center lead">Don't have an account? <a href="/register" class="link-body-emphasis link-offset-3 link-underline-opacity-25 link-underline-opacity-75-hover">Register</a> to manage your recently uploaded files.
        </p>
    </div>
    <div id="guest-message" class="d-none">
        <p class="text-center lead"><a href="/login" class="link-body-emphasis link-offset-3 link-underline-opacity-25 link-underline-opacity-75-hover">Login</a> or register to upload files. You can also upload files using a <a href="https://nostr.net/#nip-07-browser-extensions" class="link-body-emphasis link-offset-3 link-underline-opacity-25 link-underline-opacity-75-hover" target="_blank">browser extension.</a>
        </p>
    </div>
      <div id="file-table-btns" class="text-center">
        <div id="guest-buttons" class="mt-3 d-none">
            <div class="d-grid w-300 mx-auto mt-3 mb-3">
              <button class="btn btn-lg btn-primary" id="file-table-btn-nip07" type="button" onclick="semaphore.execute(async () => {await uploadFiles();})"><i class="nostr-logo me-2"></i>Browser extension upload</button>
            </div>
        </div>
        <div id="logged-buttons" class="d-none">
            <div class="d-grid w-300 mx-auto mt-3 mb-3">
                <button id="file-table-btn-upload" class="btn btn-lg btn-primary" onclick="semaphore.execute(async () => {await uploadFiles();})"><i class="fa-solid fa-cloud-arrow-up me-3"></i>Upload</button>
            </div>
        </div>
      </div>
      <p class="mb-4 mt-3">By using our services you agree the <a id="tos-link" class=" link-offset-2 link-underline-opacity-25" href='/tos'>Terms of Service</a></p>
       
    </div>
<%- include('./modals/payment-modal')%>
<script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
<script>
const identifier = '<%= JSON.stringify(request.session.identifier) %>';

const fetchFileServerInfo = async (file) => {

if (!file) {
    return { "status": "error", "message": "No file selected", "satoshi": 0 };
}

const mimeDB = await fetch('https://cdn.jsdelivr.net/gh/jshttp/mime-db/db.json')
.then(res => res.json())
.catch(error => {
    showMessage("Failed to load MIME types", "alert-danger", false);
    return null;
});

if (!mimeDB) {
    return { "status": "error", "message": "Failed to load MIME types", "satoshi": 0 };
}

const fileExtension = file.name.split('.').pop().toLowerCase();

if (!file.type) {
    for (const key in mimeDB) {
        if (mimeDB[key].extensions && mimeDB[key].extensions.includes(fileExtension)) {
            file.type = key;
            break;
        }
    }
}

if (!file.type) {
    showMessage("Invalid file type", "alert-danger", false);
    return { "filename": file.name, "url": "" };
}

try {
    const response = await fetch(window.location.hostname.includes("cdn") ? '/upload' : '/api/v2/media/upload', {
        method: "HEAD",
        headers: {
            "X-Content-Length": file.size.toString(),
            "X-Content-Type": file.type,
            "X-SHA-256": `SHA-256=:${file.fileData.hash}:`,
            "Blossom-content-metadata": file.fileData.transform, // NOT FROM BUD-07 SPEC.
        },
    });
    const data = {
        status : response.status,
        message : response.headers.get('X-Upload-Message'),
        wwwAuthenticate : response.headers.get('Www-Authenticate'),
    }
    return data;

    
} catch (error) {
    console.log(error.message)
    return { "status": "error", "message": error.message, "satoshi": 0 };
}

}

const fetchFileServer = async (file, authEvent = "", method = "", showMessages = false) => {

if (!method) {
    return;
}

if (!file) {
    showMessage("No file selected", "alert-danger", false);
    return { "filename": "", "url": "" };
}

let headers = {};
headers["authorization"] = localStorage.getItem('authkey') != "" && localStorage.getItem('authkey') != undefined ? "Bearer " + localStorage.getItem('authkey') : "Nostr " + authEvent;
method == "PUT" ? headers["Content-Type"] = file.type : null;
if (file.fileData.macaroon != "" && file.fileData.preimage != ""){
    headers["Www-Authenticate"] = `L402 macaroon="${file.fileData.macaroon}"preimage="${file.fileData.preimage}"`;
}
let uploadMessage = null

if (showMessages) uploadMessage = showMessage(`Uploading file... `, "alert-info", true);

const formData = new FormData();
formData.append('file', file);

try {
    const response = await fetch(method == "PUT" ? window.location.hostname.includes("cdn") ? '/upload' : '/api/v2/media/upload' :  window.location.hostname.includes("cdn") ? '/': '/api/v2/media', {
        method: method,
        headers: headers,
        body: method == "PUT" ? file : formData
    });

    let serverData = await response.json();

    if (!response.status.toString().startsWith("2") && !response.status.toString().startsWith("402")) {
        if (showMessages) updateMessage(uploadMessage, '<i class="bi bi-exclamation-circle-fill pe-1"></i>' + serverData.message, "alert-danger");
        if (showMessages) hideMessage(uploadMessage, 5000);
        await storeAuthkey('', true);
        return { "filename": file.name, "url": "", "macaroon": response.headers.get('Www-Authenticate') ? extractMacaroon(response.headers.get('Www-Authenticate')) : "", "invoice": response.headers.get('Www-Authenticate') != "" ? extractInvoice(response.headers.get('Www-Authenticate')) : "" };
    }


    await storeAuthkey(response.headers.get('Authorization'));

    if (serverData.processing_url && serverData.processing_url != "") {
        authEvent = {
            kind: 27235,
            created_at: Math.floor(Date.now() / 1000),
            tags: [
                ["u", serverData.processing_url],
                ["method", "GET"]
                ],
            content: 'Authorization event for file upload status',
        };
        authEvent = btoa(JSON.stringify(await window.nostr.signEvent(authEvent)));
        serverData.processing_url.includes("cdn") ? serverData.processing_url = serverData.processing_url.replace("api/v2/media/", "") : null;
    }

    while (serverData.processing_url) {

        await new Promise(resolve => setTimeout(resolve, 1000));
        headers["authorization"] = localStorage.getItem('authkey') != "" ? "Bearer " + localStorage.getItem('authkey') : "Nostr " + authEvent;

        const processingResponse = await fetch(serverData.processing_url, {
            method: "GET",
            headers: headers
        });

        await storeAuthkey(processingResponse.headers.get('Authorization'));
        const processingData = await processingResponse.json();

        if (processingData.status === "processing") {
            if (showMessages) updateMessage(uploadMessage, `Processing file... ${processingData.percentage}`);
        } else {
            serverData.processing_url = "";
        }
    }

    const url = serverData.nip94_event ? serverData.nip94_event.tags.find(tag => tag[0] === "url")[1] : serverData.processing_url ? serverData.processing_url : serverData.url;
    if (showMessages) updateMessage(uploadMessage,
        `File uploaded successfully!
        <button class="btn p-0 pb-1" type="button" aria-controls="intro" aria-selected="false" aria-label="View file">
            <a href="${url}" target="_blank"><span><i class="fa-solid fa-link ms-2 me-2"></i><span class="visually-hidden">View file</span></span></a>
        </button>
        <button class="btn p-0 pb-1" type="button" aria-controls="intro" aria-selected="false" aria-label="Copy to clipboard" onclick="copyToClipboard(this,'${url}')">
            <span><i class="fa-solid fa-copy"></i><span class="visually-hidden">Copy to clipboard</span></span>
        </button>
        `
    );
    if (showMessages) hideMessage(uploadMessage, 15000);
    return { "filename": file.name, "url": url, "macaroon": response.headers.get('Www-Authenticate') ? extractMacaroon(response.headers.get('Www-Authenticate')) : "", "invoice": response.headers.get('Www-Authenticate') ? extractInvoice(response.headers.get('Www-Authenticate')) : "" };

} catch (error) {
    console.log(error.message);
    if (showMessages) updateMessage(uploadMessage, '<i class="bi bi-exclamation-circle-fill pe-1"></i>' + error, "alert-danger");
    if (showMessages) hideMessage(uploadMessage, 5000);
    await storeAuthkey('', true);
    return { "filename": file.name, "url": "", "macaroon": "", "invoice": "" };
}
}

function extractInvoice(wwwAuthenticate) {
    const match = wwwAuthenticate.match(/invoice="([^"]+)"/);
    return match ? match[1] : null;
}

function extractMacaroon(wwwAuthenticate) {
    const match = wwwAuthenticate.match(/macaroon="([^"]+)"/);
    console.log(match);
    return match ? match[1] : null;
}

document.addEventListener('DOMContentLoaded', async () => {

    if (identifier) {
        document.getElementById('logged-buttons').classList.remove('d-none');
    } else {
        document.getElementById('guest-message').classList.remove('d-none');
        document.getElementById('guest-buttons').classList.remove('d-none');
    }

    $('#file-table').bootstrapTable({
        idField: 'id',
        uniqueId: 'id',
        pagination: true,
        pageSize: 4,
        showHeader: false,
        paginationParts:  ['pageInfoShort', 'pageList'],
        sortName: 'id',
        sortOrder: 'desc',
    })

});
    
const filesArray = [];

const dropZone = document.getElementById('drop-zone');
const fileInput = document.getElementById('file-input');

let dropZoneOriginalBackground = dropZone.style.backgroundColor;
dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropZone.style.backgroundColor = 'rgb(248 249 250 / 30%)';
});

dropZone.addEventListener('dragleave', () => {
    dropZone.style.backgroundColor = dropZoneOriginalBackground
});

dropZone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropZone.style.backgroundColor = dropZoneOriginalBackground;
    const files = Array.from(e.dataTransfer.files);
    handleFiles(files);
});

dropZone.addEventListener('click', () => {
    fileInput.click();
});

fileInput.addEventListener('change', (e) => {
    const files = Array.from(e.target.files);
    handleFiles(files);
});

let fileCounter = 0;

async function handleFiles(files) {
    if (files.length === 0) {
        return;
    }

    document.getElementById('file-table').classList.remove('d-none');
    document.getElementById('file-table-btn-upload').classList.remove('d-none');

    for (const file of files) {
        if (!filesArray.some(f => f.fileData.originalName === file.name && f.size === file.size)) {
            const uniqueId = fileCounter++; 
            filesArray.push(file); 

            const fileData = {
                id: uniqueId,
                originalName: file.name,
                fileName: file.name.length > 30 ? file.name.substring(0, 30) + '...' : file.name,
                fileType: file.type,
                transform: file.type.startsWith('image/') || file.type.startsWith('video/') ? 1 : 0,
                fileSize: (file.size / 1024).toFixed(2) + ' KB',
                action: 'init',
                accepted: true,
                satoshi: -1,
                macaroon: null,
                invoice: null,
                isPaid: false,
                hash: null,
            };

            fileData.hash = await crypto.subtle.digest('SHA-256', await file.arrayBuffer()).then(buffer => {
                return Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join('');
            });

            file.fileData = fileData;

            $('#file-table').bootstrapTable('append', fileData);

            await getFileServerInfo(file);
        }
    }

    $(document).on('click', '.delete-btn', function() {
        const fileId = $(this).data('file-id');
        const fileIndex = filesArray.findIndex(file => file.fileData.id === fileId);
            if (fileIndex !== -1) {
                filesArray.splice(fileIndex, 1); 
                $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
            }
    });

    $(document).on('change', '.form-check-input',async function() {
        const fileId = $(this).attr('id').split('-')[0];
        const fileIndex = filesArray.findIndex(file => file.fileData.id == fileId);
        if (fileIndex !== -1) {

            $(this).prop('disabled', true);
            filesArray[fileIndex].fileData.transform = this.checked ? 1 : 0;
            filesArray[fileIndex].fileData.satoshi = -1 // Reset Satoshi value;
            $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
            console.log("getting file server info", filesArray[fileIndex].fileData);
            await getFileServerInfo(filesArray[fileIndex]).then(() => {
                $(this).prop('disabled', false);
            });
        }
    });
}

 
const uploadFiles = async () => {

    if (filesArray.length === 0) {
        showMessage("No files selected to upload 🤔", "alert-warning", false, 500);
        return;
    }

    for (const file of filesArray) {

        if (file.fileData.processed || file.fileData.accepted === false) continue;

        file.fileData.action = 'processing';
        $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));

        let authEvent = null;
        let method = $('#file-table').bootstrapTable('getRowByUniqueId', file.fileData.id).transform == 1 ? 'POST' : 'PUT';

        if (!identifier){

            if (!window.nostr) {
                initAlertModal("#uploader", 'NIP07 browser extension not found');
                document.getElementById(buttonId).innerHTML = buttonText;
                return;
            }

            try {
                const pubKey = await window.nostr.getPublicKey();

                if (!pubKey){console.debug('NIP07 public key not found');
                    return;
                }

                if (method == 'POST') {
                    authEvent= {
                        
                        kind: 27235,
                        created_at: Math.floor(Date.now() / 1000),
                        tags: [
                            ["u", window.location.hostname.includes("cdn") 
                            ? window.location.protocol + "//" + window.location.hostname + '/api/v2/media/' 
                            : window.location.protocol + "//" + window.location.hostname + '/api/v2/media'],
                            ["x", file.fileData.hash],
                            ["expiration", Math.floor(Date.now() / 1000) + 3600],
                            ["method", "POST"],
                            ],
                        content: 'NIP98 authorization event for file upload',
                    };

                }else{

                    authEvent = {

                        kind: 24242,
                        created_at: Math.floor(Date.now() / 1000),
                        tags: [
                            ["t", 'upload'],
                            ["x", file.fileData.hash],
                            ["expiration", Math.floor(Date.now() / 1000) + 3600],
                            ],
                        content: 'Blossom authorization event for file upload',
                    };
                }

                authEvent = btoa(JSON.stringify(await window.nostr.signEvent(authEvent)));

            } catch (error) {
                console.error(error);
            }
        }
        const result = await fetchFileServer(file, authEvent, method);
        if (!result || !result.url) {
            file.fileData.accepted = false;
            file.fileData.satoshi = -2;
            file.fileData.action = 'error';
            $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
            continue;
        }

        if (method == "PUT") {result.url = result.url.replace(/:\/\/[^/]+/, '://cdn.' + getDomain(window.location.hostname));}
        if (result.url.includes('cdn.')) {result.url = result.url.replace('/media', '');}

        result.macaroon != null ? file.fileData.macaroon = result.macaroon : null;
        result.invoice != null ? file.fileData.invoice = result.invoice : null;
        file.fileData.action = 'success';
        file.fileData.processed = true;
        file.fileData.fileName = '<a class="link-offset-2 link-underline-opacity-25" href="' + result.url + '" target="_blank">' + "..." + result.url.slice(-30) + '</a>'
        $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
    }

    if (!identifier) {
        document.getElementById('guest-message').classList.add('d-none');
        document.getElementById('account-message').classList.remove('d-none');
    }

}

function transformFormatter(value, row, index) {
    const fileIndex = filesArray.findIndex(file => file.fileData.id == row.id);

    return `
        <div class="form-check form-switch d-flex">
            <input type="checkbox" class="form-check-input" id="${row.id}-transform" 
                ${filesArray[fileIndex].fileData.status == 'error' ||
                filesArray[fileIndex].fileData.processed == true ||
                (row.fileType.startsWith('image/') === false && row.fileType.startsWith('video/') === false) 
                ? 'disabled' : ''} 
                ${filesArray[fileIndex].fileData.transform == true ? 'checked' : ''} control-id="ControlID-5">
            <label class="form-check-label mt-1" for="${row.id}-transform">Resize</label>
        </div>`;
}

function satoshiFormatter(value, row, index) {

    if (value == 0) return 'Free' + '<i class="fa-solid fa-star ms-2" style="color:#a06bc9"></i>'
    if (value == -1) return '<div class="spinner-border spinner-border-sm" role="status">'
                                '<span class="visually-hidden">Loading...</span>' +
                            '</div>'
    if (value == -2) return '<span class="text-danger">Failed</span>';
    return value + ' <i class="fa-solid fa-bolt text-warning"></i>'    
}

function invoiceFormatter(value, row, index) {
    if (row.isPaid === true) return '<span>Paid<i class="fa-solid fa-check ms-2"></i></span>';
    return `<button class="btn btn-sm btn-primary" ${value == null || row.satoshi <= 0 ? 'disabled' : ''} onclick="handlePayment('${value}', ${row.satoshi}, ${row.id})">Pay</button>`;
}

function fileNameFormatter(value, row, index) {
    const fileIndex = filesArray.findIndex(file => file.fileData.id == row.id);

    if (filesArray[fileIndex].fileData.accepted === false) {
        return '<span class="text-danger">' + value + '</span>';
    }
    return value;
}

function actionFormatter(value, row, index) {
    if (value == 'processing') {
        return '<div class="spinner-border spinner-border-sm" role="status">' +
                '<span class="visually-hidden">Loading...</span>' +
                '</div>';
    }
    if (value == 'success') {
        return '<button class="btn btn-sm text-white" data-file-id="' + row.id + '"><i class="fa-solid fa-check"></i></button>';
    }

    return '<button class="btn btn-sm text-danger delete-btn" data-file-id="' + row.id + '"><i class="fa-solid fa-xmark"></i></button>';
}

function handlePayment(value, satoshi, id) {
    const row = $('#file-table').bootstrapTable('getRowByUniqueId', id);
    initPaymentModal(value, row.satoshi).then(result => {
        if (result != "") {
            row.isPaid = true;
            row.preimage = result;
            $('#table').bootstrapTable('updateRow', {
                index: id,
                row: row
            });
            $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
        }
    });
}


const getFileServerInfo = async (file) => {

    const serverInfo = await fetchFileServerInfo(file);
    if (!serverInfo || !serverInfo?.status?.toString().startsWith(2)){

        // 402 Payment Required
        if (serverInfo.status == 402) {
            file.fileData.accepted = true;
            file.fileData.invoice = extractInvoice(serverInfo.wwwAuthenticate)
            file.fileData.macaroon = extractMacaroon(serverInfo.wwwAuthenticate)
            file.fileData.satoshi = serverInfo.message;
            $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
        }else{
            file.fileData.accepted = false;
            file.fileData.satoshi = -2;
            console.error(`Failed to upload: ${file.name}`);
            $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
        }

    }else{
        file.fileData.accepted = true;
        file.fileData.satoshi = 0;
        $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
    }

}

</script>

<style>
#drop-zone {
    --bs-text-opacity: 1;
    color: rgba(255, 255, 255, .5) !important;
}
</style>