<link href="https://cdn.jsdelivr.net/npm/bootstrap-table@1.22.6/dist/bootstrap-table.min.css" rel="stylesheet">
<link rel="stylesheet" href="/static/css/table.css">
<link rel="stylesheet" href="/static/css/form.css">
<div class="col-12 text-center mx-auto z-1">
    <div id="drop-zone" class="card text-center p-5 default-bg m-2 lead" role="button"><span>Drag and drop files here or click to browse</span></div>
    <input type="file" id="file-input" class="d-none" multiple>
      <div id="file-table" class="bootstrap-table bootstrap5 overflow-auto p-2 d-none" style="max-height: 30vh;">
        <table class="table">
            <tbody id="file-list"></tbody>
        </table>
      </div>
      <div id="file-table-btns" class="text-center">
        <div class="form-check form-switch">
            <input type="checkbox" class="form-check-input" id="file-table-checkbox-uploadtype" class="form-check-input" style="float:inherit;" value="true" checked disabled>
            <label for="file-table-checkbox-uploadtype" class="form-check-label">Resize and transform</label>
        </div> 
        <div id="guest-buttons" class="mt-3 d-none">
            <p class="text-center lead"><a href="/login" class="link-body-emphasis link-offset-3 link-underline-opacity-25 link-underline-opacity-75-hover">Login</a> or register to upload files. You can also upload files using a <a href="https://nostr.net/#nip-07-browser-extensions" class="link-body-emphasis link-offset-3 link-underline-opacity-25 link-underline-opacity-75-hover" target="_blank">browser extension.</a></p>
            <div class="d-grid w-300 mx-auto mt-3 mb-3">
              <button class="btn btn-lg btn-primary" id="file-table-btn-nip07" type="button" onclick="semaphore.execute(async () => {await nip07Upload();})"><i class="nostr-logo me-2"></i>Browser extension upload</button>
            </div>
        </div>
        <div id="logged-buttons" class="d-none">
            <div class="d-grid w-300 mx-auto mt-3 mb-3">
                <button id="file-table-btn-upload" class="btn btn-lg btn-primary" onclick="semaphore.execute(async () => {await uploadFiles();})"><i class="fa-solid fa-cloud-arrow-up me-3"></i>Upload</button>
            </div>
        </div>
      </div>
      <p class="mb-4 mt-3">By using our services you agree the <a id="tos-link" class=" link-offset-1 link-underline-opacity-25" href='/tos'>Terms of Service</a></p>
       
    </div>
<script>

    document.addEventListener('DOMContentLoaded', async () => {

        // if user is logged in, show upload buttons
        const identifier = '<%= JSON.stringify(request.session.identifier) %>';
        if (identifier) {
            document.getElementById('logged-buttons').classList.remove('d-none');
        } else {
            document.getElementById('guest-buttons').classList.remove('d-none');
        }
    });
    
const filesArray = [];

const dropZone = document.getElementById('drop-zone');
const fileInput = document.getElementById('file-input');
const fileList = document.getElementById('file-list');

let dropZoneOriginalBackground = dropZone.style.backgroundColor;
dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropZone.style.backgroundColor = 'rgb(248 249 250 / 30%)';
});

dropZone.addEventListener('dragleave', () => {
    dropZone.style.backgroundColor = dropZoneOriginalBackground
});

dropZone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropZone.style.backgroundColor = dropZoneOriginalBackground;
    const files = Array.from(e.dataTransfer.files);
    handleFiles(files);
});

dropZone.addEventListener('click', () => {
    fileInput.click();
});

fileInput.addEventListener('change', (e) => {
    const files = Array.from(e.target.files);
    handleFiles(files);
});

function handleFiles(files) {
    if (files.length === 0) {
        return;
    }
    document.getElementById('file-table').classList.remove('d-none');
    document.getElementById('file-table-btn-upload').classList.remove('d-none');
    files.forEach(file => {

        filesArray.push(file); 

        const row = document.createElement('tr');

        const fileNameCell = document.createElement('td');
        fileNameCell.id = file.name;
        fileNameCell.textContent = file.name.length > 50 ? file.name.substring(0, 40) + '...' : file.name;
        fileNameCell.classList.add('text-start');
        fileNameCell.style.minWidth = '200px';
        fileNameCell.style.maxWidth = '300px';
        
        const fileSizeCell = document.createElement('td');
        fileSizeCell.id = file.name + '-size';
        fileSizeCell.textContent = (file.size / 1024).toFixed(2) + ' KB';
        fileSizeCell.classList.add('text-end'); 

        const deleteCell = document.createElement('td');
        const deleteButton = document.createElement('button');
        deleteButton.id = file.name + '-delete';	
        deleteButton.innerHTML = '<i class="fa-solid fa-xmark"></i>';
        deleteButton.classList.add('btn', 'btn-sm');
        deleteCell.classList.add('text-center');
        deleteButton.onclick = () => {
            row.remove();
            filesArray.splice(filesArray.indexOf(file), 1);
        };

        deleteCell.appendChild(deleteButton);

        row.appendChild(fileNameCell);
        row.appendChild(fileSizeCell);
        row.appendChild(deleteCell);

        if (fileList.firstChild) {
            fileList.insertBefore(row, fileList.firstChild);
        } else {
            fileList.appendChild(row);
        }
    });
    $('#file-table').bootstrapTable('load', files);
}
  
const uploadFiles = async (authEventPut = "", authEventGet = "") => {
    const processedFiles = [];

    for (let i = filesArray.length - 1; i >= 0; i--) {
        const file = filesArray[i];
        document.getElementById(file.name + '-delete').innerHTML = 
            '<div class="spinner-border spinner-border-sm" role="status">' +
            '<span class="visually-hidden">Loading...</span>' +
            '</div>';
        document.getElementById(file.name + '-delete').disabled = true;

        const result = await fetchFileServer(file, authEventPut, authEventGet);
        if (!result || !result.url) {
            console.error(`Failed to upload: ${file.name}`);
            document.getElementById(file.name).innerHTML = `<span class="text-danger">Failed: ${file.name}</span>`;
            document.getElementById(file.name + '-delete').innerHTML = '<i class="fa-solid fa-xmark"></i>';
            document.getElementById(file.name + '-delete').disabled = false;
            continue;
        }
        document.getElementById(file.name).innerHTML = `<a class="link-offset-2 link-underline-opacity-25" href="${result.url}" target="_blank">${"..." + result.url.slice(-30)}</a>`;
        document.getElementById(file.name + '-delete').innerHTML = '<i class="fa-solid fa-check"></i>';
        processedFiles.push(file); 
    }

    for (const file of processedFiles) {
        filesArray.splice(filesArray.indexOf(file), 1);
    }
}

const nip07Upload = async () => {

    if (!window.nostr) {
        initAlertModal("#uploader", 'NIP07 browser extension not found');
        document.getElementById(buttonId).innerHTML = buttonText;
        return;
    }

    try {
        const pubKey = await window.nostr.getPublicKey();

        if (!pubKey){console.debug('NIP07 public key not found');
            return;
        }

        const serverURL = window.location.origin
        console.log('Server URL:', serverURL);

        let eventPut = {
            kind: 27235,
            created_at: Math.floor(Date.now() / 1000),
            tags: [
                ["u", window.location.origin + "/api/v2/media/upload/"],
                ["method", "PUT"]
                ],
            content: 'Authorization event for file upload',
        };

        let eventGet = {
            kind: 27235,
            created_at: Math.floor(Date.now() / 1000),
            tags: [
                ["u", window.location.origin + "/api/v2/media/upload/"],
                ["method", "GET"]
                ],
            content: 'Authorization event for file upload status',
        };
        const putEvent = JSON.stringify(await window.nostr.signEvent(eventPut));
        const getEvent = JSON.stringify(await window.nostr.signEvent(eventGet));

        if (putEvent && getEvent) {
            await uploadFiles(btoa(putEvent), btoa(getEvent));
        }
    } catch (error) {
        console.error(error);
    }
}

</script>

<style>
#drop-zone {
    --bs-text-opacity: 1;
    color: rgba(255, 255, 255, .5) !important;
}
</style>