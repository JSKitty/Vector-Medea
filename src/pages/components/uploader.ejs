<link href="https://cdn.jsdelivr.net/npm/bootstrap-table@1.22.6/dist/bootstrap-table.min.css" rel="stylesheet">
<link rel="stylesheet" href="/static/css/table.css">
<link rel="stylesheet" href="/static/css/form.css">
<div class="col-12 text-center mx-auto z-1">
    <div id="drop-zone" class="card text-center p-5 default-bg m-2 lead" role="button"><span>Drag and drop files here or click to browse</span></div>
    <input type="file" id="file-input" class="d-none" multiple>
    <table 
        id="file-table" 
        data-toggle="table" 
        class="table d-none">
        <thead>
            <tr>
                <th data-field="fileName">File Name</th>
                <th data-field="fileType" class="d-none">File Type</th>
                <th data-field="transform" data-formatter="transformFormatter">Resize</th>
                <th data-field="fileSize">File Size</th>
                <th data-field="action">Action</th>
            </tr>
        </thead>
        <tbody id="file-table-body"></tbody>
    </table>
    <div id="account-message" class="d-none">
        <p class="text-center lead">Don't have an account? <a href="/register" class="link-body-emphasis link-offset-3 link-underline-opacity-25 link-underline-opacity-75-hover">Register</a> to manage your recently uploaded files.
        </p>
    </div>
    <div id="guest-message" class="d-none">
        <p class="text-center lead"><a href="/login" class="link-body-emphasis link-offset-3 link-underline-opacity-25 link-underline-opacity-75-hover">Login</a> or register to upload files. You can also upload files using a <a href="https://nostr.net/#nip-07-browser-extensions" class="link-body-emphasis link-offset-3 link-underline-opacity-25 link-underline-opacity-75-hover" target="_blank">browser extension.</a>
        </p>
    </div>
      <div id="file-table-btns" class="text-center">
        <div id="guest-buttons" class="mt-3 d-none">
            <div class="d-grid w-300 mx-auto mt-3 mb-3">
              <button class="btn btn-lg btn-primary" id="file-table-btn-nip07" type="button" onclick="semaphore.execute(async () => {await uploadFiles();})"><i class="nostr-logo me-2"></i>Browser extension upload</button>
            </div>
        </div>
        <div id="logged-buttons" class="d-none">
            <div class="d-grid w-300 mx-auto mt-3 mb-3">
                <button id="file-table-btn-upload" class="btn btn-lg btn-primary" onclick="semaphore.execute(async () => {await uploadFiles();})"><i class="fa-solid fa-cloud-arrow-up me-3"></i>Upload</button>
            </div>
        </div>
      </div>
      <p class="mb-4 mt-3">By using our services you agree the <a id="tos-link" class=" link-offset-2 link-underline-opacity-25" href='/tos'>Terms of Service</a></p>
       
    </div>
<script>

const identifier = '<%= JSON.stringify(request.session.identifier) %>';

document.addEventListener('DOMContentLoaded', async () => {

    if (identifier) {
        document.getElementById('logged-buttons').classList.remove('d-none');
    } else {
        document.getElementById('guest-message').classList.remove('d-none');
        document.getElementById('guest-buttons').classList.remove('d-none');
    }

    $('#file-table').bootstrapTable({
        idField: 'id',
        uniqueId: 'id',
        pagination: true,
        pageSize: 4,
        showHeader: false,
        paginationParts: Â ['pageInfoShort', 'pageList'],
        sortName: 'id',
        sortOrder: 'desc',
    })

});
    
const filesArray = [];

const dropZone = document.getElementById('drop-zone');
const fileInput = document.getElementById('file-input');

let dropZoneOriginalBackground = dropZone.style.backgroundColor;
dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropZone.style.backgroundColor = 'rgb(248 249 250 / 30%)';
});

dropZone.addEventListener('dragleave', () => {
    dropZone.style.backgroundColor = dropZoneOriginalBackground
});

dropZone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropZone.style.backgroundColor = dropZoneOriginalBackground;
    const files = Array.from(e.dataTransfer.files);
    handleFiles(files);
});

dropZone.addEventListener('click', () => {
    fileInput.click();
});

fileInput.addEventListener('change', (e) => {
    const files = Array.from(e.target.files);
    handleFiles(files);
});

let fileCounter = 0;

function handleFiles(files) {
    if (files.length === 0) {
        return;
    }

    document.getElementById('file-table').classList.remove('d-none');
    document.getElementById('file-table-btn-upload').classList.remove('d-none');

    files.forEach(file => {
        if (!filesArray.some(f => f.fileData.originalName === file.name && f.size === file.size)) {
            const uniqueId = fileCounter++; 
            filesArray.push(file); 

            fileData = {
                id: uniqueId,
                originalName: file.name,
                fileName: file.name.length > 30 ? file.name.substring(0, 30) + '...' : file.name,
                fileType: file.type,
                transform: file.type.startsWith('image/') || file.type.startsWith('video/') ? 1 : 0,
                fileSize: (file.size / 1024).toFixed(2) + ' KB',
                action: '<button class="btn btn-sm delete-btn" data-file-id="' + uniqueId + '"><i class="fa-solid fa-xmark"></i></button>'
            };

            file.fileData = fileData;

            $('#file-table').bootstrapTable('append', fileData);
        }
    });

    $(document).on('click', '.delete-btn', function() {
        const fileId = $(this).data('file-id');
        const fileIndex = filesArray.findIndex(file => file.fileData.id === fileId);
            if (fileIndex !== -1) {
                filesArray.splice(fileIndex, 1); 
                $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));

            }
    });

    $(document).on('change', '.form-check-input', function() {
        const fileId = $(this).attr('id').split('-')[0];
        const fileIndex = filesArray.findIndex(file => file.fileData.id == fileId);
        if (fileIndex !== -1) {
            filesArray[fileIndex].fileData.transform = this.checked ? 1 : 0;
            $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
        }
    });
}
  
const uploadFiles = async () => {

    for (const file of filesArray) {

        if (file.fileData.processed) {
            continue;
        }

        $('#file-table').bootstrapTable('updateByUniqueId', {
            id: file.fileData.id,
            row: {
                action: '<div class="spinner-border spinner-border-sm" role="status">' +
                        '<span class="visually-hidden">Loading...</span>' +
                        '</div>'
            }
        });

    let authEventPut = null;
    let authEventGet = null;
    let method = $('#file-table').bootstrapTable('getRowByUniqueId', file.fileData.id).transform == 1 ? 'POST' : 'PUT';

    if (!identifier){

        if (!window.nostr) {
            initAlertModal("#uploader", 'NIP07 browser extension not found');
            document.getElementById(buttonId).innerHTML = buttonText;
            return;
        }

        try {
            const pubKey = await window.nostr.getPublicKey();

            if (!pubKey){console.debug('NIP07 public key not found');
                return;
            }

            const serverURL = window.location.origin
            console.log('Server URL:', serverURL);

            const hash = await crypto.subtle.digest('SHA-256', await file.arrayBuffer()).then(buffer => {
                return Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join('');
            })

            if (method == 'POST') {
                authEventPut = {
                    
                    kind: 27235,
                    created_at: Math.floor(Date.now() / 1000),
                    tags: [
                        ["u", window.location.protocol + "//" + getDomain(window.location.hostname) + '/api/v2/media'],
                        ["method", "POST"],
                        ],
                    content: 'Blossom authorization event for file upload',
                };

            }else{

                authEventPut = {

                    kind: 24242,
                    created_at: Math.floor(Date.now() / 1000),
                    tags: [
                        ["t", 'upload'],
                        ["x", hash],
                        ["expiration", Math.floor(Date.now() / 1000) + 3600],
                        ],
                    content: 'Blossom authorization event for file upload',
                };
            }

            authEventGet = {
                kind: 27235,
                created_at: Math.floor(Date.now() / 1000),
                tags: [
                    ["u", getDomain(window.location.hostname) + '/api/v2/media/upload/'],
                    ["method", "GET"]
                    ],
                content: 'Authorization event for file upload status',
            };

            authEventPut = btoa(JSON.stringify(await window.nostr.signEvent(authEventPut)));
            authEventGet = btoa(JSON.stringify(await window.nostr.signEvent(authEventGet)));

        } catch (error) {
            console.error(error);
        }
    }

        const result = await fetchFileServer(file, authEventPut, authEventGet, method);
        if (!result || !result.url) {
            console.error(`Failed to upload: ${file.name}`);
            $('#file-table').bootstrapTable('updateByUniqueId', {
                id: file.fileData.id,
                row: {
                    fileName: '<span class="text-danger">Failed: ' + file.name + '</span>',
                    action: '<button class="btn btn-sm delete-btn" data-file-id="' + file.fileData.id + '"><i class="fa-solid fa-xmark"></i></button>'
                }
            });
            continue;
        }

        if (method == "PUT") {result.url = result.url.replace(/:\/\/[^/]+/, '://cdn.' + getDomain(window.location.hostname));}

        $('#file-table').bootstrapTable('updateByUniqueId', {
            id: file.fileData.id,
            row: {
                fileName: '<a class="link-offset-2 link-underline-opacity-25" href="' + result.url + '" target="_blank">' + "..." + result.url.slice(-30) + '</a>',
                action: '<i class="fa-solid fa-check"></i>'
            }
        });

        file.fileData.processed = true;
    }

    if (!identifier) {
        document.getElementById('guest-message').classList.add('d-none');
        document.getElementById('account-message').classList.remove('d-none');
    }

    $('#file-table').bootstrapTable('load', filesArray.map(file => file.fileData));
}

function transformFormatter(value, row, index) {

    const fileIndex = filesArray.findIndex(file => file.fileData.id == row.id);

    if (row.fileType.startsWith('image/') === false && row.fileType.startsWith('video/') === false) {
        return '<div class="form-check form-switch d-flex">' +
        '<input type="checkbox" class="form-check-input" id="' + row.id + '-transform" disabled>' +
        '<label class="form-check-label mt-1" for="' + row.id + '-transform">Resize</label>' +
        '</div>';
    }

    if (filesArray[fileIndex].fileData.processed) {
        return row.transform ? 
            '<div class="form-check form-switch d-flex">' + 
            '<input type="checkbox" class="form-check-input" id="' + row.id + '-transform" checked disabled>' +
            '<label class="form-check label mt-1" for="' + row.id + '-transform">Resize</label>' +
            '</div>' :
            '<div class="form-check form-switch d-flex">' +
            '<input type="checkbox" class="form-check-input" id="' + row.id + '-transform" disabled>' +
            '<label class="form-check label mt-1" for="' + row.id + '-transform">Resize</label>' +
            '</div>';
    }

    return row.transform ? 
        '<div class="form-check form-switch d-flex">' +
        '<input type="checkbox" class="form-check-input" id="' + row.id + '-transform" checked>' +
        '<label class="form-check-label mt-1" for="' + row.id + '-transform">Resize</label>' +
        '</div>' :
        '<div class="form-check form-switch d-flex">' +
        '<input type="checkbox" class="form-check-input" id="' + row.id + '-transform">' +
        '<label class="form-check-label mt-1" for="' + row.id + '-transform">Resize</label>' +
        '</div>';
}

</script>

<style>
#drop-zone {
    --bs-text-opacity: 1;
    color: rgba(255, 255, 255, .5) !important;
}
</style>