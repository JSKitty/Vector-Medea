<div class="d-flex justify-content-center mt-3 mb-3">
    <input 
        type="search" 
        id="userSearch" 
        class="form-control w-75" 
        placeholder="Search for users..." 
        aria-label="Search for users">
</div>
<div id="masonry-container" class="g-2 p-1 mt-1"></div>
<div id="no-users" class="visually-hidden text-center py-5 fs-4"><p>No users found</p></div>
<div id="sentinelEnd"></div>
<div class="d-flex justify-content-center mt-5 mb-5">
    <div class="spinner-border text-secondary" id="loading-spinner" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<style>
    #masonry-container {
        display: flex;
        justify-content: center;
        gap: 10px; 
        flex-wrap: wrap;
    }

    .user-card {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 200px;
        text-align: center;
        transition: transform 0.3s;
    }

    .user-card:hover {
        transform: scale(1.05);
    }

    .user-card span {
        display: block;
        margin: 5px 0;
    }

    .fade-in {
        opacity: 0;
        animation: fadeIn 0.5s forwards;
    }

    @keyframes fadeIn {
        to {
            opacity: 1;
        }
    }
</style>

<script>
const apiBaseUrl = "http://localhost:3000/api/v2";
const masonryContainer = document.getElementById('masonry-container');
const noUsersDiv = document.getElementById('no-users');
const loadingSpinner = document.getElementById('loading-spinner');
const searchInput = document.getElementById('userSearch');
const allUsers = [];

document.addEventListener('DOMContentLoaded', async () => {
    try {
        const domainsResponse = await fetch(`${apiBaseUrl}/domains`);
        if (!domainsResponse.ok) throw new Error("Failed to load domains");

        const data = await domainsResponse.json();
        const availableDomains = Object.keys(data.availableDomains);

        if (availableDomains.length === 0) {
            noUsersDiv.classList.remove('visually-hidden');
            return;
        }

        await loadAllUsers(availableDomains);

        loadingSpinner.classList.add('visually-hidden'); 
    } catch (error) {
        console.error("Error loading domains:", error);
    }
});

async function loadAllUsers(domains) {
    try {
        for (const domain of domains) {
            await loadUsers(domain);
        }

        const allHexes = allUsers.map(user => user.hex);
        subscribeRelays(0, allHexes, "from", Math.floor(Date.now() / 1000) - (3650 * 24 * 60 * 60)).then((data) => {
            if (!data || data.length === 0) return;

            data.forEach(item => {
                const hex = item.pubkey;
                const user = allUsers.find(user => user.hex === hex);
                if (user) {
                    user.nostrData = item.content ? JSON.parse(item.content) : null;
                    updateUserCard(user); 
                }
            });
        });
    } catch (error) {
        console.error("Error loading all users or subscribing to relays:", error);
    }
}

const userCardMap = new Map();

async function loadUsers(domain) {
    try {
        const usersResponse = await fetch(`${apiBaseUrl}/domains/${domain}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to load users for domain ${domain}`);
        const usersData = await usersResponse.json();

        const users = usersData[domain];
        if (!Array.isArray(users) || users.length === 0) return;

        users.forEach(user => {
            user.domain = domain;
        });

        allUsers.push(...users);

        users.forEach(user => createUserCard(user));
    } catch (error) {
        console.error(`Error loading users for domain ${domain}:`, error);
    }
}

const observerOptions = {
    root: null, 
    rootMargin: "100px", 
    threshold: 0.1 
};

const userCardObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const hex = entry.target.getAttribute('data-pubkey');
            const user = allUsers.find(u => u.hex === hex);
            if (user) {
                updateUserCard(user);
            }
            observer.unobserve(entry.target);
        }
    });
}, observerOptions);


function createUserCard(user) {
    const userCard = document.createElement('div');
    userCard.classList.add('user-card', 'fade-in');
    userCard.setAttribute('data-pubkey', user.hex);

    const imgElement = document.createElement('img');
    imgElement.classList.add('user-image');
    imgElement.style.width = '100%';
    imgElement.style.borderRadius = '5px';
    imgElement.src = '/static/resources/loading-image.webp';
    imgElement.alt = 'Loading...';
    userCard.appendChild(imgElement);

    const usernameSpan = document.createElement('span');
    usernameSpan.textContent = `Username: ${user.username || 'Loading...'}`;
    usernameSpan.classList.add('username');
    userCard.appendChild(usernameSpan);

    const pubkeySpan = document.createElement('span');
    pubkeySpan.textContent = `Pubkey: ${user.hex}`;
    pubkeySpan.classList.add('pubkey');
    userCard.appendChild(pubkeySpan);

    const nostrDataSpan = document.createElement('span');
    nostrDataSpan.textContent = `NostrData: Loading...`;
    nostrDataSpan.classList.add('nostr-data');
    userCard.appendChild(nostrDataSpan);

    masonryContainer.appendChild(userCard);

    userCardMap.set(user.hex, userCard);

    userCardObserver.observe(userCard);
}


async function updateUserCard(user) {
    const userCard = userCardMap.get(user.hex); 
    if (!userCard) return; 

    const imgElement = userCard.querySelector('.user-image');
    const pubkeySpan = userCard.querySelector('.pubkey');
    const usernameSpan = userCard.querySelector('.username');
    const nostrDataSpan = userCard.querySelector('.nostr-data');

    if (imgElement && user.nostrData?.picture) {
        imgElement.src = user.nostrData.picture;
        imgElement.alt = `${user.nostrData.display_name || user.username}'s picture`;
    }

    if (usernameSpan) {
        usernameSpan.textContent = `Username: ${user.nostrData?.username || user.username}`;
    }

    if (pubkeySpan) {
        await hextoNpub(user.hex).then((npub) => {
            pubkeySpan.innerHTML = `<a target="blank_" href="https://njump.me/${npub}">${npub}</a>`;
        });
    }

    if (nostrDataSpan) {
        const displayName = user.nostrData?.display_name || "No display name";
        const about = user.nostrData?.about || "No description available";
        nostrDataSpan.textContent = `Display Name: ${displayName}\nAbout: ${about}`;
    }
}

searchInput.addEventListener('input', (event) => {
    const searchTerm = event.target.value.toLowerCase();
    masonryContainer.innerHTML = ""; 

    const filteredUsers = allUsers.filter(user => {
        return Object.values(user).some(value =>
            value.toString().toLowerCase().includes(searchTerm)
        );
    });

    if (filteredUsers.length > 0) {
        filteredUsers.forEach(user => createUserCard(user));
    } else {
        noUsersDiv.classList.remove('visually-hidden');
    }
});

</script>
