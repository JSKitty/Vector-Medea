<div class="container mt-5">
    <ul id="last-notes-list" class="list-group">
        <% request.session.metadata.nostr_notes.forEach(note => { %>
            <li class="list-group-item">
                <p class="mb-1" id="<%- note.id %>"><%- note.content %></p>
                <small class="text-muted"><%= new Date(note.created_at * 1000).toLocaleString() %></small>
            </li>
        <% }); %>
    </ul>
</div>
<script>

document.addEventListener('DOMContentLoaded', (event) => {
    const notes = document.querySelectorAll('#last-notes-list p');
    notes.forEach(note => {
        let content = note.innerHTML;

        // Regular expressions for matching media types and line breaks
        const imgRegex = /https?:\/\/[^\s"]+\.(png|jpg|jpeg|gif|webp)/g;
        const videoRegex = /https?:\/\/[^\s"]+\.(mp4|webm|ogg)/g;
        const audioRegex = /https?:\/\/[^\s"]+\.(mp3|wav|ogg)/g;
        const lineBreakRegex = /(?:\r\n|\r|\n)/g;

        // Find matches in the content
        const imgMatch = content.match(imgRegex);
        const videoMatch = content.match(videoRegex);
        const audioMatch = content.match(audioRegex);

        // Replace image links with <img> tags
        if (imgMatch) {
            imgMatch.forEach(imgUrl => {
                content = content.replace(imgUrl, `<div class="text-center"><img src="${imgUrl}" style="max-height:450px; max-width:80%" alt="note image"></div>`);
            });
        }

        // Replace video links with <video> tags
        if (videoMatch) {
            videoMatch.forEach(videoUrl => {
                content = content.replace(videoUrl, `<div class="text-center"><video src="${videoUrl}" style="max-height:450px; max-width:80%" controls></video></div>`);
            });
        }

        // Replace audio links with <audio> tags
        if (audioMatch) {
            audioMatch.forEach(audioUrl => {
                content = content.replace(audioUrl, `<div class="text-center"><audio src="${audioUrl}" height="200px" controls></audio></div>`);
            });
        }

        // Replace line breaks with <br> tags
        if (lineBreakRegex.test(content)) {
            content = content.replace(lineBreakRegex, '<br>');
        }

        // Update the note's innerHTML
        note.innerHTML = content;
    });
});
</script>